<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="jh.dao.local.AccountOprLogDao" >
  <resultMap id="BaseResultMap" type="jh.model.po.AccountOprLog" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="group_id" property="groupId" jdbcType="BIGINT" />
    <result column="account_id" property="accountId" jdbcType="BIGINT" />
    <result column="out_trade_no" property="outTradeNo" jdbcType="VARCHAR" />
    <result column="amount" property="amount" jdbcType="DECIMAL" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="version" property="version" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, group_id, account_id, out_trade_no, amount, `type`, `status`, remark, create_time, 
    update_time, version
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from account_opr_log
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from account_opr_log
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="jh.model.po.AccountOprLog" >
    insert into account_opr_log (id, group_id, account_id, 
      out_trade_no, amount, `type`, 
      `status`, remark, create_time, 
      update_time, version)
    values (#{id,jdbcType=BIGINT}, #{groupId,jdbcType=BIGINT}, #{accountId,jdbcType=BIGINT}, 
      #{outTradeNo,jdbcType=VARCHAR}, #{amount,jdbcType=DECIMAL}, #{type,jdbcType=INTEGER}, 
      #{status,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{version,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="jh.model.po.AccountOprLog" >
    insert into account_opr_log
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="groupId != null" >
        group_id,
      </if>
      <if test="accountId != null" >
        account_id,
      </if>
      <if test="outTradeNo != null" >
        out_trade_no,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="type != null" >
        `type`,
      </if>
      <if test="status != null" >
        `status`,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="version != null" >
        version,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="groupId != null" >
        #{groupId,jdbcType=BIGINT},
      </if>
      <if test="accountId != null" >
        #{accountId,jdbcType=BIGINT},
      </if>
      <if test="outTradeNo != null" >
        #{outTradeNo,jdbcType=VARCHAR},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null" >
        #{version,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="jh.model.po.AccountOprLog" >
    update account_opr_log
    <set >
      <if test="groupId != null" >
        group_id = #{groupId,jdbcType=BIGINT},
      </if>
      <if test="accountId != null" >
        account_id = #{accountId,jdbcType=BIGINT},
      </if>
      <if test="outTradeNo != null" >
        out_trade_no = #{outTradeNo,jdbcType=VARCHAR},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="type != null" >
        `type` = #{type,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        `status` = #{status,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null" >
        version = #{version,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="jh.model.po.AccountOprLog" >
    update account_opr_log
    set group_id = #{groupId,jdbcType=BIGINT},
      account_id = #{accountId,jdbcType=BIGINT},
      out_trade_no = #{outTradeNo,jdbcType=VARCHAR},
      amount = #{amount,jdbcType=DECIMAL},
      `type` = #{type,jdbcType=INTEGER},
      `status` = #{status,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      version = #{version,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <insert id="batchInsert" parameterType="java.util.List" >
    insert into account_opr_log (
    group_id,
    account_id,
    out_trade_no,
    amount,
    `type`,
    remark)
    values
    <foreach collection ="list" item="log" index= "index" separator =",">
      (
      #{log.groupId},
      #{log.accountId},
      #{log.outTradeNo},
      #{log.amount},
      #{log.type},
      #{log.remark}
      )
    </foreach >
  </insert>

  <select id="selectByTradeNo" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from account_opr_log
    where out_trade_no = #{outTradeNo,jdbcType=VARCHAR} order by group_id,id asc
  </select>

  <select id="selectByGroupId" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from account_opr_log
    where account_id = #{accountId,jdbcType=BIGINT}
    <if test="types != null and types.size()>0" >
      and type in
      <foreach collection="types" index="index" item="type" open="(" separator="," close=")">
        #{type}
      </foreach>
    </if>
    <if test="statusList != null and statusList.size()>0" >
      and status in
      <foreach collection="statusList" index="index" item="status" open="(" separator="," close=")">
        #{status}
      </foreach>
    </if>
    order by id
  </select>

  <update id="updateStatusById">
    update account_opr_log
    set
    status = #{toStatus,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT} and status = #{fromStatus,jdbcType=INTEGER}
  </update>

  <select id="select" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from account_opr_log where 1=1
    <if test="accountId != null" >
      and account_id = #{accountId,jdbcType=BIGINT}
    </if>
    <if test="oprType != null" >
      and type = #{oprType,jdbcType=INTEGER}
    </if>
    <if test="outTradeNo != null" >
      and out_trade_no like concat(concat(#{outTradeNo,jdbcType=VARCHAR}),'%')
    </if>
    <if test="status != null" >
      and status = #{status,jdbcType=INTEGER}
    </if>
    <if test="groupIds != null and groupIds.size()>0" >
      and group_id in
      <foreach collection="groupIds" index="index" item="groupId" open="(" separator="," close=")">
        #{groupId}
      </foreach>
    </if>
    <if test="statusList != null and statusList.size()>0" >
      and status in
      <foreach collection="statusList" index="index" item="status" open="(" separator="," close=")">
        #{status}
      </foreach>
    </if>
    order by out_trade_no desc,id desc
    limit #{startIndex,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
  </select>

  <select id="count" resultType="java.lang.Integer">
    select count(1) from account_opr_log where 1=1
    <if test="accountId != null" >
      and account_id = #{accountId,jdbcType=BIGINT}
    </if>
    <if test="oprType != null" >
      and type = #{oprType,jdbcType=INTEGER}
    </if>
    <if test="outTradeNo != null" >
      and out_trade_no like concat(concat(#{outTradeNo,jdbcType=VARCHAR}),'%')
    </if>
    <if test="status != null" >
      and status = #{status,jdbcType=INTEGER}
    </if>
    <if test="groupIds != null and groupIds.size()>0" >
      and group_id in
      <foreach collection="groupIds" index="index" item="groupId" open="(" separator="," close=")">
        #{groupId}
      </foreach>
    </if>
    <if test="statusList != null and statusList.size()>0" >
      and status in
      <foreach collection="statusList" index="index" item="status" open="(" separator="," close=")">
        #{status}
      </foreach>
    </if>
  </select>

  <select id="selectByUnq" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from account_opr_log
    where out_trade_no = #{outTradeNo,jdbcType=VARCHAR}
    and group_id = #{groupId,jdbcType=BIGINT}
    and `type` = #{type,jdbcType=INTEGER}
  </select>

  <select id="sumLockAmount" resultType="java.math.BigDecimal">
    select sum(amount) from account_opr_log where status = 1
    <if test="groupIds != null and groupIds.size()>0" >
      and group_id in
      <foreach collection="groupIds" index="index" item="groupId" open="(" separator="," close=")">
        #{groupId}
      </foreach>
    </if>
    <if test="types != null and types.size()>0" >
      and type in
      <foreach collection="types" index="index" item="type" open="(" separator="," close=")">
        #{type}
      </foreach>
    </if>
  </select>
</mapper>