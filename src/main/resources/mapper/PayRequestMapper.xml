<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="jh.dao.local.PayRequestDao" >
  <resultMap id="BaseResultMap" type="jh.model.po.PayRequest" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="out_trade_no" property="outTradeNo" jdbcType="VARCHAR" />
    <result column="body" property="body" jdbcType="VARCHAR" />
    <result column="mch_id" property="mchId" jdbcType="VARCHAR" />
    <result column="sub_openid" property="subOpenid" jdbcType="VARCHAR" />
    <result column="buyer_id" property="buyerId" jdbcType="VARCHAR" />
    <result column="service" property="service" jdbcType="VARCHAR" />
    <result column="appid" property="appid" jdbcType="VARCHAR" />
    <result column="sign" property="sign" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="pay_result" property="payResult" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="version" property="version" jdbcType="INTEGER" />
    <result column="trade_type" property="tradeType" jdbcType="INTEGER" />
    <result column="fee" property="fee" jdbcType="DECIMAL" />
    <result column="actual_amount" property="actualAmount" jdbcType="DECIMAL" />
    <result column="total_fee" property="totalFee" jdbcType="INTEGER" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="channel_provider_code" property="channelProviderCode" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, out_trade_no, body, mch_id, sub_openid, buyer_id, service, appid, sign, `status`, 
    create_time, update_time, version,trade_type,fee,actual_amount,total_fee,remark,
    channel_provider_code,pay_result
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from pay_request
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from pay_request
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="jh.model.po.PayRequest" >
    insert into pay_request (id, out_trade_no, body, 
      mch_id, sub_openid, buyer_id, 
      service, appid, sign, 
      `status`, create_time, update_time, 
      version)
    values (#{id,jdbcType=BIGINT}, #{outTradeNo,jdbcType=VARCHAR}, #{body,jdbcType=VARCHAR}, 
      #{mchId,jdbcType=VARCHAR}, #{subOpenid,jdbcType=VARCHAR}, #{buyerId,jdbcType=VARCHAR}, 
      #{service,jdbcType=VARCHAR}, #{appid,jdbcType=VARCHAR}, #{sign,jdbcType=VARCHAR}, 
      #{status,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{version,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="jh.model.po.PayRequest" >
    insert into pay_request
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="outTradeNo != null" >
        out_trade_no,
      </if>
      <if test="body != null" >
        body,
      </if>
      <if test="mchId != null" >
        mch_id,
      </if>
      <if test="subOpenid != null" >
        sub_openid,
      </if>
      <if test="buyerId != null" >
        buyer_id,
      </if>
      <if test="service != null" >
        service,
      </if>
      <if test="appid != null" >
        appid,
      </if>
      <if test="sign != null" >
        sign,
      </if>
      <if test="status != null" >
        `status`,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="version != null" >
        version,
      </if>
      <if test="tradeType != null" >
        trade_type,
      </if>
      <if test="fee != null" >
        fee,
      </if>
      <if test="actualAmount != null" >
        actual_amount,
      </if>
      <if test="totalFee != null" >
        total_fee,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="channelProviderCode != null" >
        channel_provider_code,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="outTradeNo != null" >
        #{outTradeNo,jdbcType=VARCHAR},
      </if>
      <if test="body != null" >
        #{body,jdbcType=VARCHAR},
      </if>
      <if test="mchId != null" >
        #{mchId,jdbcType=VARCHAR},
      </if>
      <if test="subOpenid != null" >
        #{subOpenid,jdbcType=VARCHAR},
      </if>
      <if test="buyerId != null" >
        #{buyerId,jdbcType=VARCHAR},
      </if>
      <if test="service != null" >
        #{service,jdbcType=VARCHAR},
      </if>
      <if test="appid != null" >
        #{appid,jdbcType=VARCHAR},
      </if>
      <if test="sign != null" >
        #{sign,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null" >
        #{version,jdbcType=INTEGER},
      </if>
      <if test="tradeType != null" >
        #{tradeType,jdbcType=INTEGER},
      </if>
      <if test="fee != null" >
        #{fee,jdbcType=DECIMAL},
      </if>
      <if test="actualAmount != null" >
        #{actualAmount,jdbcType=DECIMAL},
      </if>
      <if test="totalFee != null" >
        #{totalFee,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="channelProviderCode != null" >
        #{channelProviderCode,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="jh.model.po.PayRequest" >
    update pay_request
    <set >
      <if test="outTradeNo != null" >
        out_trade_no = #{outTradeNo,jdbcType=VARCHAR},
      </if>
      <if test="body != null" >
        body = #{body,jdbcType=VARCHAR},
      </if>
      <if test="mchId != null" >
        mch_id = #{mchId,jdbcType=VARCHAR},
      </if>
      <if test="subOpenid != null" >
        sub_openid = #{subOpenid,jdbcType=VARCHAR},
      </if>
      <if test="buyerId != null" >
        buyer_id = #{buyerId,jdbcType=VARCHAR},
      </if>
      <if test="service != null" >
        service = #{service,jdbcType=VARCHAR},
      </if>
      <if test="appid != null" >
        appid = #{appid,jdbcType=VARCHAR},
      </if>
      <if test="sign != null" >
        sign = #{sign,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        `status` = #{status,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        `pay_result` = #{payResult,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null" >
        version = #{version,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="jh.model.po.PayRequest" >
    update pay_request
    set out_trade_no = #{outTradeNo,jdbcType=VARCHAR},
      body = #{body,jdbcType=VARCHAR},
      mch_id = #{mchId,jdbcType=VARCHAR},
      sub_openid = #{subOpenid,jdbcType=VARCHAR},
      buyer_id = #{buyerId,jdbcType=VARCHAR},
      service = #{service,jdbcType=VARCHAR},
      appid = #{appid,jdbcType=VARCHAR},
      sign = #{sign,jdbcType=VARCHAR},
      `status` = #{status,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      version = #{version,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="selectByTradeNo" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from pay_request
    where out_trade_no = #{tradeNo,jdbcType=VARCHAR}
  </select>

  <update id="updateStatusById">
    update pay_request
    set status = #{toStatus,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT} and status = #{fromStatus,jdbcType=INTEGER}
  </update>

  <update id="updateFailed">
    update pay_request
    set status = 98,
    remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT} and status = #{fromStatus,jdbcType=INTEGER}
  </update>

  <select id="selectUnfinishedList" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from pay_request
    where status in (0,1)  and id > #{currentId,jdbcType=BIGINT} and <![CDATA[ create_time < #{createTime,jdbcType=TIMESTAMP} ]]> order by id
  </select>

  <select id="selectWaitingPromote" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from pay_request
    where status in (10,20) order by id
--     and <![CDATA[ DATE_FORMAT(update_time,'yyyy-MM-dd') < CURRENT_DATE ]]> order by id
  </select>

  <select id="select" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from pay_request
    where 1=1
    <if test="outTradeNo != null">
      and out_trade_no like concat(#{outTradeNo,jdbcType=VARCHAR},'%')
    </if>
    <if test="mchId != null">
      and mch_id = #{mchId,jdbcType=VARCHAR}
    </if>
    <if test="service != null">
      and service = #{service,jdbcType=VARCHAR}
    </if>
    <if test="status != null">
      and status = #{status,jdbcType=INTEGER}
    </if>
    <if test="statusList != null and statusList.size()>0">
      and status in
      <foreach item="status" index="index" collection="statusList" open="(" separator="," close=")">
        #{status}
      </foreach>
    </if>
    <if test="type != null">
      and trade_type = #{type,jdbcType=INTEGER}
    </if>
    <if test="mchIds != null and mchIds.size()>0">
      and mch_id in
      <foreach item="item" index="index" collection="mchIds" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test="startId != null">
      and id >= #{startId,jdbcType=BIGINT}
    </if>
    <if test="lastTime != null">
      and <![CDATA[ create_time < #{lastTime,jdbcType=TIMESTAMP} ]]>
    </if>
    <if test="sortType != null and sortType =='asc'">
      order by id ASC
    </if>
    <if test="sortType == null or sortType =='desc'">
      order by id DESC
    </if>
    limit #{startIndex,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
  </select>

  <select id="selectCount" resultType="java.lang.Integer">
    select count(1) from pay_request where 1=1
    <if test="outTradeNo != null">
      and out_trade_no = #{outTradeNo,jdbcType=VARCHAR}
    </if>
    <if test="mchId != null">
      and mch_id = #{mchId,jdbcType=VARCHAR}
    </if>
    <if test="service != null">
      and service = #{service,jdbcType=BIGINT}
    </if>
    <if test="status != null">
      and status = #{status,jdbcType=INTEGER}
    </if>
    <if test="type != null">
      and trade_type = #{type,jdbcType=INTEGER}
    </if>
    <if test="mchIds != null and mchIds.size()>0">
      and mch_id in
      <foreach item="item" index="index" collection="mchIds" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
  </select>

  <update id="updatePayResult">
    update pay_request
    set pay_result = #{payResult,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT} and version = #{version,jdbcType=INTEGER}
  </update>

  <update id="updateActualAmount">
    update pay_request
    set
      actual_amount = #{actualAmount,jdbcType=VARCHAR},
      fee = #{fee,jdbcType=VARCHAR},
      version = version+1
    where id = #{id,jdbcType=BIGINT} and version = #{version,jdbcType=INTEGER}
  </update>


</mapper>